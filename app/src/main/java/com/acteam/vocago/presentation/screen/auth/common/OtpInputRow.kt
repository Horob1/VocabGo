package com.acteam.vocago.presentation.screen.auth.common

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.size
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusManager
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.input.key.Key
import androidx.compose.ui.input.key.KeyEvent
import androidx.compose.ui.input.key.key
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.unit.dp


@Composable
fun RowOtpInputField(
    otp: String,
    onOtpChange: (String) -> Unit,
    modifier: Modifier = Modifier,
) {
    val focusRequesters = List(6) { FocusRequester() }
    val localFocusManager = LocalFocusManager.current

    Column(
        verticalArrangement = Arrangement.spacedBy(12.dp),
        modifier = modifier,
    ) {
        // H√†ng ƒë·∫ßu: 3 √¥ ƒë·∫ßu (index 0, 1, 2)
        Row(
            horizontalArrangement = Arrangement.spacedBy(
                12.dp,
                alignment = Alignment.CenterHorizontally
            ),
            modifier = Modifier.fillMaxWidth()
        ) {
            (0 until 3).forEach { index ->
                val char = otp.getOrNull(index)?.toString() ?: ""
                OTPDigitField(
                    value = char,
                    onValueChange = { value ->
                        handleOtpInput(
                            value = value,
                            index = index,
                            otp = otp,
                            focusRequesters = focusRequesters,
                            focusManager = localFocusManager,
                            onOtpChange = onOtpChange
                        )
                    },
                    onKeyEvent = { keyEvent ->
                        handleBackspace(keyEvent, char, index, focusRequesters)
                    },
                    modifier = Modifier
                        .focusRequester(focusRequesters[index])
                        .size(48.dp) // üëà √¥ vu√¥ng c·ªë ƒë·ªãnh 48dp
                )
            }
        }

        // H√†ng th·ª© hai: 3 √¥ cu·ªëi (index 3, 4, 5)
        Row(
            horizontalArrangement = Arrangement.spacedBy(12.dp, alignment = Alignment.CenterHorizontally),
            modifier = Modifier.fillMaxWidth()
        ) {
            (3 until 6).forEach { index ->
                val char = otp.getOrNull(index)?.toString() ?: ""
                OTPDigitField(
                    value = char,
                    onValueChange = { value ->
                        handleOtpInput(
                            value = value,
                            index = index,
                            otp = otp,
                            focusRequesters = focusRequesters,
                            focusManager = localFocusManager,
                            onOtpChange = onOtpChange
                        )
                    },
                    onKeyEvent = { keyEvent ->
                        handleBackspace(keyEvent, char, index, focusRequesters)
                    },
                    modifier = Modifier
                        .focusRequester(focusRequesters[index])
                        .size(48.dp) // üëà gi·ªëng tr√™n
                )
            }
        }
    }

    LaunchedEffect(Unit) {
        focusRequesters.first().requestFocus()
    }
}

private fun handleOtpInput(
    value: String,
    index: Int,
    otp: String,
    focusRequesters: List<FocusRequester>,
    focusManager: FocusManager,
    onOtpChange: (String) -> Unit
) {
    if (value.all { it.isDigit() } && value.length <= 1) {
        // T·∫°o m·∫£ng char t·ª´ OTP hi·ªán t·∫°i, ƒë·∫£m b·∫£o c√≥ ƒë·ªß 6 v·ªã tr√≠
        val otpArray = CharArray(6) { i ->
            otp.getOrNull(i) ?: ' '
        }

        // C·∫≠p nh·∫≠t k√Ω t·ª± t·∫°i v·ªã tr√≠ index
        if (value.isNotEmpty()) {
            otpArray[index] = value[0]
            // T·ª± ƒë·ªông chuy·ªÉn focus sang √¥ ti·∫øp theo
            when (index) {
                0, 1 -> focusRequesters[index + 1].requestFocus() // T·ª´ √¥ 0->1, 1->2
                2 -> focusRequesters[3].requestFocus() // T·ª´ √¥ 2 xu·ªëng √¥ 3 (h√†ng m·ªõi)
                3, 4 -> focusRequesters[index + 1].requestFocus() // T·ª´ √¥ 3->4, 4->5
                5 -> focusManager.clearFocus() // √î cu·ªëi c√πng
            }
        } else {
            // X√≥a k√Ω t·ª± - thay th·∫ø b·∫±ng kho·∫£ng tr·∫Øng
            otpArray[index] = ' '
        }

        // T·∫°o OTP string m·ªõi, lo·∫°i b·ªè kho·∫£ng tr·∫Øng cu·ªëi
        val newOtp = otpArray.concatToString().trimEnd()
        onOtpChange(newOtp)
    }
}

// Helper function ƒë·ªÉ x·ª≠ l√Ω ph√≠m Backspace
private fun handleBackspace(
    keyEvent: KeyEvent,
    char: String,
    index: Int,
    focusRequesters: List<FocusRequester>
): Boolean {
    return if (keyEvent.key == Key.Backspace && char.isEmpty() && index > 0) {
        val previousIndex = when (index) {
            1, 2 -> index - 1 // T·ª´ √¥ 1->0, 2->1
            3 -> 2 // T·ª´ √¥ 3 l√™n √¥ 2 (h√†ng tr√™n)
            4, 5 -> index - 1 // T·ª´ √¥ 4->3, 5->4
            else -> 0
        }
        focusRequesters[previousIndex].requestFocus()
        true
    } else {
        false
    }
}
